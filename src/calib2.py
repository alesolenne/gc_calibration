#! /usr/bin/env python3

import numpy as np
import pandas as pd
import scipy
import scipy.linalg

def shah(AA, BB):
    m, n = AA.shape
    n = n // 4
    A = np.zeros((9 * n, 18))
    T = np.zeros((9, 9))
    b = np.zeros((9 * n, 1))

    for i in range(n):
        Ra = AA[0:3, 4 * i:4 * i + 3]
        Rb = BB[0:3, 4 * i:4 * i + 3]
        T = T + np.kron(Rb, Ra)

    u, s, v = np.linalg.svd(T)
    u = np.round(u,decimals = 4)
    s = np.round(s,decimals = 4)
    v = np.round(v,decimals = 4)
    s = np.diag(s)
    x = v[0, :]
    y = u[:,0]
    

    X = np.reshape(x,(3,3))
    X = np.sign(np.linalg.det(X))/pow(abs(np.linalg.det(X)),1/3)*X
    X = X.T
    #SVD X
    u, s, v = np.linalg.svd(X)
    s = np.diag(s)
    v = v.T
    
    X = u @ v.T
    X = np.round(X,decimals = 4)


    #### Y
    Y = np.reshape(y,(3,3))
    Y = Y.T
    Y = np.sign(np.linalg.det(Y))/pow(abs(np.linalg.det(Y)),1/3)*Y

    u, s, v = scipy.linalg.svd(Y)
    s = np.diag(s)
    sign_u = np.linalg.det(u)
    if sign_u < 0:
        sign_u = -1
    elif sign_u > 0:
        sign_u = 1

    # Applico il segno
    u = u * sign_u
    v = v * sign_u
    Y = u @ v   
    Y = np.round(Y,decimals = 4)
    
    A = np.zeros((3*n,6))
    b = np.zeros((3*n,1))
    for i in range(n):
        A[3 * i:3 * i + 3, :] = np.hstack([-AA[0:3, 4 * i:4 * i + 3], np.eye(3)])
        b[3 * i:3 * i + 3, :] = AA[0:3, 4 * i + 3].reshape((3,1)) - np.kron(BB[0:3, 4 * i + 3].T, np.eye(3)) @ np.reshape(Y.T, (9, 1))
    
    t = np.linalg.lstsq(A, b, rcond=None)[0]

    X = np.vstack([np.hstack([X, t[0:3]]), [0, 0, 0, 1]])
    Y = np.vstack([np.hstack([Y, t[3:6]]), [0, 0, 0, 1]])

    return X, Y

# Caricamento del file CSV
file_in = '/home/franka/catkin_ws/src/gc_calibration/workdir/calib_matrices.csv'
matrices = pd.read_csv(file_in, sep="whitespace" , header=None)
matrices = np.array(matrices)

nn = 15 # numero di acquisizioni

T_RT = np.zeros((4, nn*4))
T_RT[1, :] = float(matrices[1, :]) # ?????

print(T_RT)
T_CT = matrices[6:10, :]

print(np.shape(T_RT))

#print(T_RT)
#print(T_CT)

# T_RT = np.array([[0.145453,   0.989282,  0.0128389,   0.339958,  0.0200211,   0.967222,  -0.253141,   0.254496, -0.0808197,   0.741952,   0.665564,   0.324006,   0.253498,   0.779031,   0.573454,   0.529262,   0.750172,   0.652878,  0.104842,   0.563941,   0.927368,   0.190278,   0.322153,   0.672382,   0.840792,   0.253857,  -0.478148,   0.517991,   0.915983,   0.392808, -0.0817104,   0.357215,   0.738985,   0.243191,   0.628298,   0.344523,   0.654389,  0.318712,    0.68571,   0.254683],
#  [0.306507, -0.0573962,   0.950136, 0.00739874,   0.466164,   0.214955,   0.858187,   0.129824,   0.402823,  -0.586472,   0.702697,  -0.148347,   0.704438,  -0.554948,   0.442492,  -0.110935,   0.415889,   -0.58912,   0.692802,   0.145458,  -0.170634,  -0.551183,   0.816751,  0.0136311,   0.540928,  -0.358763,   0.760714,   0.209457,   0.204437,  -0.281715,   0.937466,   0.155463,  -0.483868,  -0.457341,   0.746131,  -0.136512,  -0.476486,  -0.530336,   0.701217,  -0.119885],
#   [0.94069,  -0.134265,   -0.31157,   0.436361,   0.884472,  -0.135187,   -0.44658,   0.357331,   0.911703,   0.324896,  -0.251477,   0.565787,   0.662952,   0.291792,  -0.689458,   0.535298,   0.514079,  -0.476118,  -0.713466,   0.420025,   0.332974,  -0.812399,  -0.478681,   0.379782,  0.0215703,  -0.898246,  -0.438964,   0.351921,   0.345225,  -0.875408,   -0.33835,   0.400008,   0.468799,  -0.855393,  -0.220296,   0.430678,   0.587143,  -0.785599,  -0.195184,   0.330182],
#    [     0,          0,          0,          1,          0,          0,          0,          1,          0,          0,          0,          1,         0,         0,          0,          1,          0,          0,          0,          1,          0,          0,          0,          1,          0,          0,          0,          1,          0,          0,          0,          1,          0,          0,          0,          1,          0,          0,          0,          1]
#])

#T_CT = np.array([[  -0.0844209,    -0.992045,   -0.0933832,     0.129491,    0.0243505,    -0.984881,     0.171512,     0.219481,     0.140996,    -0.704638,    -0.695418,     0.142172,    -0.216633,    -0.755591,    -0.618184,   -0.0756354,    -0.720736,    -0.675532,    -0.155552,    -0.111391,    -0.906384,    -0.238503,    -0.348689,    -0.230906 ,   -0.839101,    -0.303273,     0.451591,   -0.0547561,    -0.895904,    -0.443987,    0.0152411,     0.107318,    -0.706023,    -0.288749,    -0.646649,     0.111706,    -0.615348,    -0.342009,    -0.710195,     0.197816],
#[    -0.99471,    0.0894085,   -0.0505753,   0.00159804,    -0.991572,   -0.0019573,     0.129539,    0.0445607,    -0.987375,    -0.151304,   -0.0468807,   -0.0700284,    -0.877127,    -0.127373,      0.46306,   -0.0493059,    -0.664539,      0.60944,     0.432401,   -0.0277762,    -0.308112,     0.937904,     0.159381,    0.0495227,    -0.251942,     0.952428,     0.171484,    0.0130556,    -0.443933,     0.896033,   0.00691759,   -0.0139079,    -0.326962,     0.942865,   -0.0640368,     0.057817,    -0.440647,     0.896296,   -0.0498309,     0.154114],
#[   0.0585222,    0.0886196,    -0.994345,       0.4874,    -0.127245,    -0.173221,    -0.976628,     0.335592,   -0.0721852,     0.693248,    -0.717075,     0.689879,    -0.428624,      0.64254,    -0.635156,     0.657901,    -0.197301,     0.415017,    -0.888163,     0.353604,     0.289024,     0.251896,    -0.923587,     0.473035,    -0.482115,    0.0301176,     -0.87559,    0.266547,   -0.0167278, -0.000568527,     -0.99986,     0.330007,     0.628194,     0.166218,    -0.760095,     0.634879,     0.653587,     0.282282,     -0.70224,     0.574833],
#[     0,          0,          0,          1,          0,          0,          0,          1,          0,          0,          0,          1,         0,         0,          0,          1,          0,          0,          0,          1,          0,          0,          0,          1,          0,          0,          0,          1,          0,          0,          0,          1,          0,          0,          0,          1,          0,          0,          0,          1]
#])

T_wt2 = [np.linalg.inv(T_RT[0:4, 4 * k:4 * k + 4]) for k in range(nn)] # n matrix of shape 4x4
T_ct1 = [np.linalg.inv(T_CT[0:4, 4 * k:4 * k + 4]) for k in range(nn)]


T_wt2_n = np.concatenate(T_wt2, axis=1)
T_ct1_n = np.concatenate(T_ct1, axis=1)


X, Y = shah(T_wt2_n, T_ct1_n)

print("X:")
print(X)
print("\nY:")
print(Y)

#X = np.round(X,decimals = 4) scommentare per avere una matrice con 4 cifre significative

file_out = '/home/franka/catkin_ws/src/gc_calibration/workdir/camera_calib_debug_1.csv'
np.savetxt(file_out, X, delimiter=' ')

